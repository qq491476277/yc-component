stages:
  - init-deploy  # 此步骤仅用于首次创建必要环境（如相关secrets、service、ingress）所用
  - build-push
  - deploy-dev
  - deploy-qa
  - deploy-prod


variables:
  REGISTRY_USER: $REGISTRY_USER
  REGISTRY_PASSWORD: $REGISTRY_PASSWORD
  VERSION: $CI_COMMIT_REF_NAME
  REPOSITORY: registry.cn-shanghai.aliyuncs.com/ly_release/ccc-registration
  REPOSITORY_VPC: registry-vpc.cn-shanghai.aliyuncs.com/ly_release/ccc-registration

.runner_template: &runner_template
  tags:
    - rancher
    - dev

.docker_login: &docker_login
  variables:
    REGISTRY: registry.cn-shanghai.aliyuncs.com
    REGISTRY_VPC: registry-vpc.cn-shanghai.aliyuncs.com
  services:
    - docker:dind
  before_script:
    - echo $REGISTRY_PASSWORD | docker login -u $REGISTRY_USER --password-stdin $REGISTRY

.init_deploy: &init_deploy
  stage: init-deploy
  image: i.harbor.dragonest.net/public/kubectl:v1.13.2
  script:
    - REGISTRY_VPC=registry-vpc.cn-shanghai.aliyuncs.com
    - ENV=${INIT_DEPLOY}
    - NAMESPACE=mmxlr-${ENV}
    - source kubernetes/functions
    - echo ${BUCKET}
    - mkdir -p /root/.kube && echo "${KUBECTL_CONFIG}" > /root/.kube/config
    - kubectl create namespace ${NAMESPACE} || true
    - create_registry_secret ${NAMESPACE} registry-ccc-registration
    - kubectl apply -n ${NAMESPACE} -f kubernetes/ingress-${ENV}.yml
    - kubectl create configmap ccc-registration-config -n ${NAMESPACE} --from-file=kubernetes/default.conf --dry-run -o yaml | kubectl apply -n ${NAMESPACE} -f -


init-deploy-dev: 
  variables:
    KUBECTL_CONFIG: ${KUBECTL_CONFIG_JCYFB_DEV}
  <<: *init_deploy
  <<: *runner_template
  only:
    variables:
      - $INIT_DEPLOY == "dev"

init-deploy-qa: 
  variables:
    KUBECTL_CONFIG: ${KUBECTL_CONFIG_JCYFB_DEV}
  <<: *init_deploy
  <<: *runner_template
  only:
    variables:
      - $INIT_DEPLOY == "qa"

init-deploy-prod:
  variables:
    KUBECTL_CONFIG: ${KUBECTL_CONFIG_MMXLR_PROD}
  <<: *init_deploy
  <<: *runner_template
  only:
    variables:
      - $INIT_DEPLOY == "prod"

# build:
#   stage: build
#   image: i.harbor.dragonest.net/public/node:9.5-alpine-cnpm
#   script:
#     # - ENV=$(echo ${CI_COMMIT_REF_NAME} | cut -d '-' -f1)
#     - npm --registry http://172.16.52.62:8081/repository/ly_npm_all/ install
#     - npm run build:${ENV}
#   artifacts:
#     untracked: false
#     expire_in: 30 days
#     paths:
#       - ./nuxt
#   <<: *runner_template
#   only:
#     variables:
#       - $ENV == "dev"
#       - $ENV == "qa"
#       - $ENV == "prod"
#   except:
#     - master      

build-push:
  stage: build-push
  image: docker:latest
  <<: *docker_login
  script:
    - docker build -t ${REPOSITORY}:$CI_COMMIT_REF_NAME --build-arg ENV=$ENV --build-arg NODE_ENV=$ENV --build-arg ACCESSKEYID=$ACCESSKEYID --build-arg ACCESSKEYSECRET=$ACCESSKEYSECRET --build-arg BUCKET=$BUCKET --build-arg REGION=$REGION -f Dockerfile .
    - docker push ${REPOSITORY}:$CI_COMMIT_REF_NAME
  <<: *runner_template
  only:
    variables:
      - $ENV == "dev"
      - $ENV == "qa"
      - $ENV == "prod"  
  except:
    - master


.deploy_template: &deploy_template
  image: i.harbor.dragonest.net/public/kubectl:v1.13.2
  script:
    - source kubernetes/functions
    - mkdir -p /root/.kube && echo "${KUBECTL_CONFIG}" > /root/.kube/config
    - sed -e "s/IMAGE_PLACEHOLDER/${CI_COMMIT_REF_NAME}/g" -e "s/REPLICAS_PLACEHOLDER/${REPLICAS:-2}/g" kubernetes/deployments.yml
    - sed -e "s/IMAGE_PLACEHOLDER/${CI_COMMIT_REF_NAME}/g" -e "s/REPLICAS_PLACEHOLDER/${REPLICAS:-2}/g" kubernetes/deployments.yml | kubectl apply -n ${NAMESPACE} -f -
    - kubectl -n ${NAMESPACE} rollout status deploy/ccc-registration || { kubectl -n ${NAMESPACE} describe pod -lapp=ccc-registration; exit 1; }
  except:
    - master

deploy-dev:
  stage: deploy-dev
  environment:
    name: dev
    url: https://ccc-registration-dev.dev-test.dragonest.com
  variables:
    REPLICAS: 2
    NAMESPACE: mmxlr-dev
    KUBECTL_CONFIG: ${KUBECTL_CONFIG_JCYFB_DEV}
  <<: *deploy_template
  <<: *runner_template
  only:
    variables:
      - $ENV == "dev"
      - $DEPLOY == "dev"

deploy-qa:
  stage: deploy-qa
  environment:
    name: qa
    url: https://ccc-registration-qa.dev-test.dragonest.com
  variables:
    REPLICAS: 2
    NAMESPACE: mmxlr-qa
    KUBECTL_CONFIG: ${KUBECTL_CONFIG_JCYFB_DEV}
  <<: *deploy_template
  <<: *runner_template
  only:
    variables:
      - $ENV == "qa"
      - $DEPLOY == "qa"

deploy-prod:
  stage: deploy-prod
  environment:
    name: prod
    url: https://ccc-registration.mmxlr.com
  variables:
    REPLICAS: ${REPLICAS_PROD}
    NAMESPACE: mmxlr-prod
    KUBECTL_CONFIG: ${KUBECTL_CONFIG_JCYFB_DEV}
  <<: *deploy_template
  <<: *runner_template
  when: manual
  only:
    variables:
      - $ENV == "prod"
      - $DEPLOY == "prod"
